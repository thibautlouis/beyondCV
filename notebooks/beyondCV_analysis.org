#+TITLE: Beyond Cosmic Variance Analysis

* Preamble
#+BEGIN_SRC ipython :session bcv :results none
  %matplotlib inline
  import matplotlib.pyplot as plt
  plt.rcParams["text.usetex"] = True
  import pandas as pd
  import numpy as np
  from getdist import plots, MCSamples
  from IPython.display import HTML, display
  import tabulate
#+END_SRC

* Plot cosmological parameters distribution
** Cosmo. parameters LaTeX labels
#+BEGIN_SRC ipython :session bcv :results none
  labels = [r"$\theta_\mathrm{MC}$",
            r"$\log(10^{10}A_\mathrm{s})$",
            r"$n_\mathrm{s}$",
            r"$\Omega_\mathrm{b}h^2$",
            r"$\Omega_\mathrm{c}h^2$",
            r"$A_\mathrm{s}$",
            r"$\chi^2-\chi^2_\mathrm{min}$"]
#+END_SRC

** Get cosmo. parameters from output file
#+BEGIN_SRC ipython :session bcv :results none
  def get_params(path, pattern="*.likelihood", weight=False):
      import os, glob
      all_files = glob.glob(os.path.join(path, pattern))
      # Sort alphabetically
      all_files.sort()

      header = pd.read_csv(all_files[0], delim_whitespace=True).columns[1:]
      df = pd.concat((pd.read_table(f, delim_whitespace=True) for f in all_files))

      # Remove '#' in header
      df.drop(df.columns[[-1,]], axis=1, inplace=True)
      df.columns = header
      df.insert(value=df.chi2-np.min(df.chi2), column="delta_chi2", loc=8)
      params = np.array(df.iloc[:, 2:9])
      if weight:
        params = (params, np.array(df.iloc[:, 0]))
      return params
#+END_SRC

** Show input values of cosmo. parameters
#+BEGIN_SRC ipython :session bcv :results none
  ref = [1.04164/100, np.exp(3.058)/1e10, 0.9649, 0.02212, 0.1210]
  def show_ref(g):
      for i, r in enumerate(ref):
          kwargs = dict(color="gray", ls="--", lw=1)
          for ax in g.subplots[:,i]:
              if ax: ax.axvline(r, **kwargs)
          for ax in g.subplots[i,:i]:
              if ax: ax.axhline(r, **kwargs)
#+END_SRC
** Results from pure Planck simulation
*** Cosmo. parameters distribution
#+BEGIN_SRC ipython :session bcv :results none
  params = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/unbinned")
  samples = MCSamples(samples=params, names=labels)
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results raw drawer
  g = plots.getSubplotPlotter()
  g.settings.colormap = "inferno"
  g.triangle_plot(samples, params=labels[:-1], shaded=True)
  show_ref(g)
#+END_SRC

#+RESULTS:
:results:
# Out[6]:
[[file:./obipy-resources/udD6Jr.png]]
:end:

#+BEGIN_SRC ipython :session bcv :results raw drawer
  g = plots.getSubplotPlotter()
  g.settings.colormap_scatter = "inferno"
  g.triangle_plot(samples, params=labels[:-1],
                  plot_3d_with_param="$\chi^2/\mathrm{ndf}$", scatter_size=20)
  show_ref(g)
#+END_SRC

#+RESULTS:
:results:
# Out[7]:
[[file:./obipy-resources/IIe6N6.png]]
:end:

#+BEGIN_SRC ipython :session bcv :results output
  print("Number of sucessful minimization :", np.alen(params))
#+END_SRC

#+RESULTS:
: Number of sucessful minimization : 638

#+BEGIN_SRC ipython :session bcv :results none
  min_mean = np.mean(params, axis=0)
  min_std  = np.std(params, axis=0)
  fisher = np.array([5.1265507267143515e-06, 1.2854648947626772e-11, 0.005589724100405197, 0.00020382255228959767, 0.002334040314343261, 1.])
  lines = [[r"$\mu$"], [r"$\sigma$"], [r"$\sigma$ (Fisher)"], [r"$\Delta\sigma$ (min-Fisher) [%]"]]
  table = np.stack([min_mean, min_std, fisher, 100*(min_std-fisher)/fisher])
  table = np.append(lines, table, axis=1)
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results raw drawer
  display(HTML(tabulate.tabulate(table, headers=labels, tablefmt="html")))
#+END_SRC

#+RESULTS:
:results:
# Out[17]:
: <IPython.core.display.HTML object>
:end:

*** Org table                                                    :noexport:

#+BEGIN_SRC ipython :session bcv :results raw output :export none
  print(tabulate.tabulate(table, headers=labels, tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|                                 | $\theta_\mathrm{MC}$ | $A_\mathrm{s}$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ | $\chi^2/\mathrm{ndf}$ |
|---------------------------------+----------------------+----------------+----------------+------------------------+------------------------+-----------------------|
| $\mu$                           |            0.0104162 |    2.12887e-09 |       0.964695 |              0.0221223 |                0.12108 |               1.53808 |
| $\sigma$                        |          4.99937e-06 |    1.24047e-11 |     0.00544548 |            0.000206822 |              0.0022281 |               0.03946 |
| $\sigma$ (Fisher)               |          5.12655e-06 |    1.28546e-11 |     0.00558972 |            0.000203823 |             0.00233404 |                     1 |
| $\Delta\sigma$ (min-Fisher) [%] |             -2.48081 |        -3.5002 |       -2.58047 |                1.47141 |                -4.5391 |               -96.054 |

* Simons Observatory âŠ— Planck
** \ell \in [2; 3000]
#+BEGIN_SRC ipython :session bcv :results raw drawer
  params_SO   = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/ell_2_3000", "*SO.likelihood")
  params_SOxP = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/ell_2_3000", "*SOxP.likelihood")
  params_P    = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/ell_2_3000", "*_P.likelihood")
  params_SO.shape, params_SOxP.shape, params_P.shape
#+END_SRC

#+RESULTS:
:results:
# Out[192]:
: ((978, 7), (978, 7), (978, 7))
:end:

#+BEGIN_SRC ipython :session bcv :results none
  samples_SO   = MCSamples(samples=params_SO, names=labels, label="SOxSO")
  samples_SOxP = MCSamples(samples=params_SOxP, names=labels, label="SOxP")
  samples_P    = MCSamples(samples=params_P, names=labels, label="PxP")
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results none
  lines = [[r"$\mu$(SOxSO)"], [r"$\mu$(SOxP)"], [r"$\mu$(PxP)"],
           [r"$\sigma$(SOxSO)"], [r"$\sigma$(SOxP)"], [r"$\sigma$(PxP)"],
           [r"$\sigma$(SOxSO - PxP)"], [r"$\sigma$(SOxSO - SOxP)"], [r"$\sigma$(SOxSO + PxP - 2 SOxP)"]]
  std_SO, std_SOxP, std_P = np.std(params_SO, axis=0), np.std(params_SOxP, axis=0), np.std(params_P, axis=0)
  std_SOmP = np.std(params_SO-params_P, axis=0)
  std_SOmSOxP = np.std(params_SO-params_SOxP, axis=0)
  std_SOpPm2SOxP = np.std(params_SO + params_P - 2*params_SOxP, axis=0)
  table = np.stack([np.mean(params_SO, axis=0),
                    np.mean(params_SOxP, axis=0),
                    np.mean(params_P, axis=0),
                    std_SO, std_SOxP, std_P,
                    std_SOmP, std_SOmSOxP, std_SOpPm2SOxP
  ])
  table = np.append(lines, table, axis=1)
  display(HTML(tabulate.tabulate(table, headers=labels, tablefmt="html")))
#+END_SRC

Set PxP deviation as standard for further comparison
#+BEGIN_SRC ipython :session bcv :results none
  ref_std = std_P
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results raw drawer
  x = np.arange(5)
  plt.plot(x, (ref_std/std_SO-1)[:-1], "o", label="SO")
  plt.plot(x, (ref_std/std_SOxP-1)[:-1], "o", label="SOxP")
  plt.plot(x, (ref_std/std_SOmP-1)[:-1], "o", label="SO-P")
  plt.plot(x, (ref_std/std_SOmSOxP-1)[:-1], "o", label="SO-SOxP")
  plt.plot(x, (ref_std/std_SOpPm2SOxP-1)[:-1], "o", label="SO+P-2SOxP")
  plt.xticks(x, labels[:-1])
  plt.ylabel(r"$\Delta_\sigma$ (Planck)")
  plt.legend(loc="upper left", title=r"$\ell\in[2; 3000]$", bbox_to_anchor=(1,1))
#+END_SRC

#+RESULTS:
:results:
# Out[230]:
: <matplotlib.legend.Legend at 0x7f1eda160ba8>
[[file:./obipy-resources/wTgkfy.png]]
:end:

*** Org table                                                    :noexport:
#+BEGIN_SRC ipython :session bcv :results raw output
  print(tabulate.tabulate(table, headers=labels, tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|                                | $\theta_\mathrm{MC}$ | $A_\mathrm{s}$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ | $\chi^2/\mathrm{ndf}$ |
|--------------------------------+----------------------+----------------+----------------+------------------------+------------------------+-----------------------|
| $\mu$(SOxSO)                   |            0.0104163 |     2.1288e-09 |       0.964831 |              0.0221165 |               0.121037 |               1.53776 |
| $\mu$(SOxP)                    |            0.0104162 |    2.12874e-09 |       0.964837 |              0.0221241 |               0.121029 |               1.53979 |
| $\mu$(PxP)                     |            0.0104161 |    2.12891e-09 |       0.964766 |              0.0221283 |               0.121065 |               1.53859 |
| $\sigma$(SOxSO)                |          3.30158e-06 |    8.82142e-12 |     0.00403527 |            0.000113061 |             0.00147556 |             0.0399001 |
| $\sigma$(SOxP)                 |          4.13856e-06 |    1.10042e-11 |      0.0048009 |            0.000153239 |             0.00196259 |             0.0401134 |
| $\sigma$(PxP)                  |          4.88563e-06 |    1.22407e-11 |     0.00529792 |            0.000204028 |              0.0022389 |             0.0384675 |
| $\sigma$(SOxSO - PxP)          |          3.76192e-06 |    9.58206e-12 |     0.00406034 |            0.000171957 |             0.00181588 |             0.0381408 |
| $\sigma$(SOxSO - SOxP)         |          2.53148e-06 |    7.13821e-12 |     0.00291831 |            0.000104709 |             0.00135525 |             0.0323524 |
| $\sigma$(SOxSO + PxP - 2 SOxP) |          3.28542e-06 |    9.16644e-12 |     0.00375188 |            0.000160698 |             0.00174672 |             0.0537651 |

** \ell \in [50; 2000]
#+BEGIN_SRC ipython :session bcv :results raw drawer
  params_SO   = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/ell_50_2000", "*SO.likelihood")
  params_SOxP = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/ell_50_2000", "*SOxP.likelihood")
  params_P    = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/ell_50_2000", "*_P.likelihood")
  params_SO.shape, params_SOxP.shape, params_P.shape
#+END_SRC

#+RESULTS:
:results:
# Out[232]:
: ((971, 6), (971, 6), (971, 6))
:end:

#+BEGIN_SRC ipython :session bcv :results none
  samples_SO   = MCSamples(samples=params_SO, names=labels, label="SOxSO")
  samples_SOxP = MCSamples(samples=params_SOxP, names=labels, label="SOxP")
  samples_P    = MCSamples(samples=params_P, names=labels, label="PxP")
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results raw drawer
  g = plots.getSubplotPlotter()
  g.triangle_plot([samples_SO, samples_SOxP, samples_P], params=labels[:-1])
  show_ref(g)
#+END_SRC

#+RESULTS:
:results:
# Out[178]:
[[file:./obipy-resources/j0LRmj.png]]
:end:

#+BEGIN_SRC ipython :session bcv :results none
  lines = [[r"$\mu$(SOxSO)"], [r"$\mu$(SOxP)"], [r"$\mu$(PxP)"],
           [r"$\sigma$(SOxSO)"], [r"$\sigma$(SOxP)"], [r"$\sigma$(PxP)"],
           [r"$\sigma$(SOxSO - PxP)"], [r"$\sigma$(SOxSO - SOxP)"], [r"$\sigma$(SOxSO + PxP - 2 SOxP)"]]
  std_SO, std_SOxP, std_P = np.std(params_SO, axis=0), np.std(params_SOxP, axis=0), np.std(params_P, axis=0)
  std_SOmP = np.std(params_SO-params_P, axis=0)
  std_SOmSOxP = np.std(params_SO-params_SOxP, axis=0)
  std_SOpPm2SOxP = np.std(params_SO + params_P - 2*params_SOxP, axis=0)
  table = np.stack([np.mean(params_SO, axis=0),
                    np.mean(params_SOxP, axis=0),
                    np.mean(params_P, axis=0),
                    std_SO, std_SOxP, std_P,
                    std_SOmP, std_SOmSOxP, std_SOpPm2SOxP
  ])
  table = np.append(lines, table, axis=1)
  display(HTML(tabulate.tabulate(table, headers=labels, tablefmt="html")))
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results raw drawer
  x = np.arange(5)
  plt.plot(x, (ref_std/std_SO-1)[:-1], "o", label="SO")
  plt.plot(x, (ref_std/std_SOxP-1)[:-1], "o", label="SOxP")
  plt.plot(x, (ref_std/std_SOmP-1)[:-1], "o", label="SO-P")
  plt.plot(x, (ref_std/std_SOmSOxP-1)[:-1], "o", label="SO-SOxP")
  plt.plot(x, (ref_std/std_SOpPm2SOxP-1)[:-1], "o", label="SO+P-2SOxP")
  plt.xticks(x, labels[:-1])
  plt.ylabel(r"$\Delta_\sigma$ (Planck)")
  plt.legend(loc="upper left", title=r"$\ell\in[50; 2000]$", bbox_to_anchor=(1,1))
#+END_SRC

#+RESULTS:
:results:
# Out[234]:
: <matplotlib.legend.Legend at 0x7f1eda6bdcf8>
[[file:./obipy-resources/ESNtlB.png]]
:end:

*** Org table                                                    :noexport:
#+BEGIN_SRC ipython :session bcv :results raw output
  print(tabulate.tabulate(table, headers=labels, tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|                               | $\theta_\mathrm{MC}$ | $A_\mathrm{s}$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ | $\chi^2/\mathrm{ndf}$ |
|-------------------------------+----------------------+----------------+----------------+------------------------+------------------------+-----------------------|
| $\mu$(SOxSO)                  |            0.0104165 |    2.12888e-09 |       0.964796 |               0.022119 |               0.121061 |               1.00019 |
| $\mu$(SOxP)                   |            0.0104165 |    2.12863e-09 |       0.964918 |              0.0221197 |               0.121011 |               1.00034 |
| $\mu$(PxP)                    |            0.0104164 |    2.12876e-09 |       0.964918 |               0.022122 |               0.121043 |               1.00003 |
| $\sigma$(SOxSO)               |          4.35923e-06 |    1.19063e-11 |     0.00529269 |            0.000197395 |             0.00208537 |             0.0319118 |
| $\sigma$(SOxP)                |          4.70511e-06 |    1.28073e-11 |     0.00574473 |            0.000196329 |             0.00236035 |             0.0321642 |
| $\sigma$(PxP)                 |          5.16462e-06 |    1.32325e-11 |     0.00592473 |            0.000214703 |             0.00238011 |             0.0327516 |
| $\sigma$(SOxSO - PxP)         |          2.99731e-06 |    7.16794e-12 |     0.00314853 |            0.000122405 |             0.00133315 |             0.0201569 |
| $\sigma$(SOxSO - SOxP)        |          2.03202e-06 |    5.97189e-12 |     0.00261404 |            8.41646e-05 |             0.00127252 |             0.0126795 |
| $\sigma$(SOxSO + PxP - 2 SOxP |          3.05013e-06 |    9.43821e-12 |     0.00429037 |            0.000118191 |             0.00217506 |             0.0185606 |

** \ell \in [50; 1500]
#+BEGIN_SRC ipython :session bcv :results raw drawer
  params_SO   = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/ell_50_1500", "*SO.likelihood")
  params_SOxP = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/ell_50_1500", "*SOxP.likelihood")
  params_P    = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/ell_50_1500", "*_P.likelihood")
  params_SO.shape, params_SOxP.shape, params_P.shape
#+END_SRC

#+RESULTS:
:results:
# Out[237]:
: ((1001, 6), (1001, 6), (1001, 6))
:end:

#+BEGIN_SRC ipython :session bcv :results none
  samples_SO   = MCSamples(samples=params_SO, names=labels, label="SOxSO")
  samples_SOxP = MCSamples(samples=params_SOxP, names=labels, label="SOxP")
  samples_P    = MCSamples(samples=params_P, names=labels, label="PxP")
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results raw drawer
  g = plots.getSubplotPlotter()
  g.triangle_plot([samples_SO, samples_SOxP, samples_P], params=labels[:-1])
  show_ref(g)
#+END_SRC

#+RESULTS:
:results:
# Out[206]:
[[file:./obipy-resources/O4TXAu.png]]
:end:

#+BEGIN_SRC ipython :session bcv :results none
  lines = [[r"$\mu$(SOxSO)"], [r"$\mu$(SOxP)"], [r"$\mu$(PxP)"],
           [r"$\sigma$(SOxSO)"], [r"$\sigma$(SOxP)"], [r"$\sigma$(PxP)"],
           [r"$\sigma$(SOxSO - PxP)"], [r"$\sigma$(SOxSO - SOxP)"], [r"$\sigma$(SOxSO + PxP - 2 SOxP)"]]
  std_SO, std_SOxP, std_P = np.std(params_SO, axis=0), np.std(params_SOxP, axis=0), np.std(params_P, axis=0)
  std_SOmP = np.std(params_SO-params_P, axis=0)
  std_SOmSOxP = np.std(params_SO-params_SOxP, axis=0)
  std_SOpPm2SOxP = np.std(params_SO + params_P - 2*params_SOxP, axis=0)
  table = np.stack([np.mean(params_SO, axis=0),
                    np.mean(params_SOxP, axis=0),
                    np.mean(params_P, axis=0),
                    std_SO, std_SOxP, std_P,
                    std_SOmP, std_SOmSOxP, std_SOpPm2SOxP
  ])
  table = np.append(lines, table, axis=1)
  display(HTML(tabulate.tabulate(table, headers=labels, tablefmt="html")))
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results raw drawer
  x = np.arange(5)
  plt.plot(x, (ref_std/std_SO-1)[:-1], "o", label="SO")
  plt.plot(x, (ref_std/std_SOxP-1)[:-1], "o", label="SOxP")
  plt.plot(x, (ref_std/std_SOmP-1)[:-1], "o", label="SO-P")
  plt.plot(x, (ref_std/std_SOmSOxP-1)[:-1], "o", label="SO-SOxP")
  plt.plot(x, (ref_std/std_SOpPm2SOxP-1)[:-1], "o", label="SO+P-2SOxP")
  plt.xticks(x, labels[:-1])
  plt.ylabel(r"$\Delta_\sigma$ (Planck)")
  plt.legend(loc="upper left", title=r"$\ell\in[50; 1500]$", bbox_to_anchor=(1,1))
#+END_SRC

#+RESULTS:
:results:
# Out[239]:
: <matplotlib.legend.Legend at 0x7f1eda228b00>
[[file:./obipy-resources/RyOF5b.png]]
:end:

*** Org table                                                    :noexport:
#+BEGIN_SRC ipython :session bcv :results raw output
  print(tabulate.tabulate(table, headers=labels, tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|                                | $\theta_\mathrm{MC}$ | $A_\mathrm{s}$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ | $\chi^2/\mathrm{ndf}$ |
|--------------------------------+----------------------+----------------+----------------+------------------------+------------------------+-----------------------|
| $\mu$(SOxSO)                   |            0.0104164 |    2.12863e-09 |       0.965051 |              0.0221351 |               0.120983 |              0.742085 |
| $\mu$(SOxP)                    |            0.0104164 |    2.12875e-09 |        0.96499 |              0.0221342 |               0.121003 |              0.742216 |
| $\mu$(PxP)                     |            0.0104164 |    2.12881e-09 |       0.964953 |              0.0221335 |               0.121012 |              0.742351 |
| $\sigma$(SOxSO)                |           6.3324e-06 |    1.53135e-11 |     0.00712775 |            0.000258049 |             0.00282965 |             0.0280147 |
| $\sigma$(SOxP)                 |          6.34447e-06 |    1.52396e-11 |     0.00707853 |            0.000258622 |             0.00282214 |             0.0280142 |
| $\sigma$(PxP)                  |           6.5121e-06 |     1.5435e-11 |     0.00720973 |            0.000265144 |             0.00285634 |             0.0279847 |
| $\sigma$(SOxSO - PxP)          |           1.8413e-06 |    4.23132e-12 |      0.0021341 |            7.39349e-05 |            0.000775937 |            0.00875221 |
| $\sigma$(SOxSO - SOxP)         |          9.88702e-07 |    2.64955e-12 |     0.00126386 |            4.27381e-05 |            0.000495158 |            0.00443434 |
| $\sigma$(SOxSO + PxP - 2 SOxP) |          8.43566e-07 |     3.2112e-12 |     0.00141612 |            4.80235e-05 |            0.000617392 |            0.00245867 |
* MCMC analysis
** Check chains
#+BEGIN_SRC ipython :session bcv :results none
  def get_chains(path, pattern="*.txt"):
      import os, glob
      all_files = glob.glob(os.path.join(path, pattern))
      # Sort alphabetically
      all_files.sort()
      chains = {}
      for f in all_files:
          header = pd.read_csv(all_files[0], delim_whitespace=True).columns[1:]
          df = pd.read_table(f, delim_whitespace=True)

          # Remove '#' in header
          df.drop(df.columns[[-1,]], axis=1, inplace=True)
          df.columns = header
          df.insert(value=df.chi2-np.min(df.chi2), column="delta_chi2", loc=8)
          key = f.split("/")[-2]
          # key = key.split("_")[1:2]
          chains[key] = df
      return chains
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results none
  def plot_chains(pattern, burnin=0):
      chains = get_chains(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/mcmc", pattern=pattern)
      plt.figure(figsize=(18, 10))
      for j in range(2,9):
          plt.subplot(2, 4, j-1)
          plt.ylabel(labels[j-2])
          for name, chain in chains.items():
              n = np.arange(len(chain))
              plt.plot(n[burnin:], chain.iloc[:,j][burnin:], alpha=0.75)
      plt.subplots_adjust(hspace=0.25, wspace=0.3)
      plt.legend([k.replace("_", "\_") for k in chains.keys()], loc="upper left", bbox_to_anchor=(1,1))
#+END_SRC

*** SOxSO - PxP
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_chains(pattern="output_SOxSO-PxP*/mcmc*.txt", burnin=0)
#+END_SRC

#+RESULTS:
:results:
# Out[59]:
[[file:./obipy-resources/l9AUH4.png]]
:end:

*** SOxP - PxP
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_chains(pattern="output_SOxP-PxP*/mcmc*.txt", burnin=0)
#+END_SRC

#+RESULTS:
:results:
# Out[20]:
[[file:./obipy-resources/oJursp.png]]
:end:

*** SOxP - SOxSO
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_chains(pattern="output_SOxP-SOxSO*/mcmc*.txt", burnin=0)
#+END_SRC

#+RESULTS:
:results:
# Out[21]:
[[file:./obipy-resources/uzv9nj.png]]
:end:

** Triangle plot

#+BEGIN_SRC ipython :session bcv :results none
  def get_samples(path=r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/mcmc", pattern="*.txt"):
      chains = get_chains(path, pattern)
      key = next(iter(chains))
      samples = chains[key].iloc[:, 2:9].values
      weights = chains[key].iloc[:, 0].values
      return samples, weights
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results raw drawer
  samples = []
  s, w = get_samples(pattern="output_SOxP-SOxSO*2.converged/mcmc*.txt")
  samples += [MCSamples(samples=s, names=labels, label="SOxP - SOxSO", weights=w, ignore_rows=0.3)]

  for i in [0, 1, 3, 4]:
      s, w = get_samples(pattern="output_SOxSO-PxP*{}.converged/mcmc*.txt".format(i))
      samples += [MCSamples(samples=s, names=labels, label="SOxSO - PxP - {}".format(i), weights=w, ignore_rows=0.3)]

  g = plots.getSubplotPlotter()
  g.triangle_plot(samples, params=labels[:-1])
#+END_SRC

#+RESULTS:
:results:
# Out[173]:
[[file:./obipy-resources/qpkdSO.png]]
:end:

** Plot variances from MCMC and Hessian
#+BEGIN_SRC ipython :session bcv :results none
  import os, glob
  path = r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/mcmc"
  surveys = ["SOxSO-PxP", "SOxP-PxP", "SOxP-SOxSO"]
  pattern = "output_{}"
  headers = labels[:-1]
  headers.pop(1)
#+END_SRC

*** Compute standard deviation from MCMC
#+BEGIN_SRC ipython :session bcv :results none
  table = []
  lines = []
  for survey in surveys:
      files = glob.glob(os.path.join(path, pattern.format(survey) + "*converged"))
      if not files:
          continue
      files.sort()
      for f in files:
          samples, weights = get_samples(path=f, pattern="mcmc*.txt")
          mcsamples = MCSamples(samples=samples, names=labels, weights=weights, ignore_rows=0.3)
          sigmas = np.sqrt(mcsamples.getVars()).tolist()
          sigmas.pop(1); sigmas.pop(-1)
          table += [sigmas]
          lines += [[f.split("/")[-1]]]
  table = np.append(lines, table, axis=1)
  display(HTML(tabulate.tabulate(table, headers=headers, tablefmt="html")))
#+END_SRC

**** =org= table                                                  :noexport:
#+BEGIN_SRC ipython :session bcv :results raw output
  print(tabulate.tabulate(table, headers=headers, tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|                               | $\theta_\mathrm{MC}$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ | $A_\mathrm{s}$ |
|-------------------------------+----------------------+----------------+------------------------+------------------------+----------------|
| output_SOxSO-PxP_0.converged  |          8.42204e-07 |    0.000987998 |            2.94139e-05 |             0.00032552 |    1.69715e-12 |
| output_SOxSO-PxP_1.converged  |          8.62444e-07 |     0.00100539 |            3.13933e-05 |            0.000324094 |    1.68814e-12 |
| output_SOxSO-PxP_3.converged  |          8.60141e-07 |    0.000979011 |            3.14452e-05 |            0.000316173 |    1.66227e-12 |
| output_SOxSO-PxP_4.converged  |          8.86752e-07 |     0.00095145 |            3.02972e-05 |            0.000314076 |    1.62794e-12 |
| output_SOxP-SOxSO_2.converged |          4.37106e-07 |     0.00046037 |             1.4894e-05 |            0.000152093 |    7.95761e-13 |

*** From Hessian
#+BEGIN_SRC ipython :session bcv :results none
  import pickle
  def get_hessians(path, pattern="/*.pkl"):
      import os, glob
      all_files = glob.glob(os.path.join(path, pattern))
      all_files.sort()
      hessians = {}
      for f in all_files:
          d = pickle.load(open(f, "rb"))
          hess = d["results"]["OptimizeResult"]["hess_inv"]
          hessians[f] = np.sqrt(np.diagonal(hess))
      return hessians
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results none
  table = []
  lines = []
  for survey in surveys:
      files = glob.glob(os.path.join(path, pattern.format(survey) + "*converged"))
      if not files:
          continue
      files.sort()
      hessians = get_hessians(path=path, pattern=pattern.format(survey) + "*converged*/minimize*.pkl")
      for k, v in hessians.items():
          table += [v.tolist()]
          lines += [[k.split("/")[-2]]]
  table = np.append(lines, table, axis=1)
  display(HTML(tabulate.tabulate(table, headers=headers, tablefmt="html")))
#+END_SRC

**** =org= table                                                  :noexport:
#+BEGIN_SRC ipython :session bcv :results raw output
  print(tabulate.tabulate(table, headers=headers, tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|                               | $\theta_\mathrm{MC}$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ | $A_\mathrm{s}$ |
|-------------------------------+----------------------+----------------+------------------------+------------------------+----------------|
| output_SOxSO-PxP_0.converged  |          9.07562e-07 |    0.000462882 |            0.000710933 |            2.45234e-05 |    0.000173289 |
| output_SOxSO-PxP_1.converged  |          1.00649e-06 |     0.00234359 |            0.000727028 |            0.000117997 |    0.000562889 |
| output_SOxSO-PxP_3.converged  |          1.04358e-06 |    0.000916334 |             0.00126595 |            3.51463e-05 |    0.000428267 |
| output_SOxSO-PxP_4.converged  |          1.09634e-06 |    0.000803228 |             0.00118938 |            3.60983e-05 |    0.000384808 |
| output_SOxP-SOxSO_2.converged |          4.68394e-07 |    0.000332471 |            0.000446926 |            7.51214e-06 |    0.000141894 |

*** Summary
**** SOxSO - PxP
#+TBLNAME: soxso_pxp
|                            | $\theta_\mathrm{MC}$ | $A_\mathrm{s}$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ |
|----------------------------+----------------------+----------------+----------------+------------------------+------------------------|
| Planck (full $\ell$ range) |          4.88562e-06 |    1.22406e-11 |  0.00529791672 |            2.04027e-04 |          0.00223889971 |
| MCMC (nÂ° 0)                |          8.42204e-07 |    1.69715e-12 |    0.000987998 |            2.94139e-05 |             0.00032552 |
| Min. ($\ell\in[2;3000]$)   |          3.76192e-06 |    9.58206e-12 |     0.00406034 |            0.000171957 |             0.00181588 |
| Min. ($\ell\in[50;2000]$)  |          2.99731e-06 |    7.16794e-12 |     0.00314853 |            0.000122405 |             0.00133315 |
| Min. ($\ell\in[50;1500]$)  |           1.8413e-06 |    4.23132e-12 |      0.0021341 |            7.39349e-05 |            0.000775937 |
# | MCMC (nÂ° 1)                |          8.62444e-07 |    1.68814e-12 |     0.00100539 |            3.13933e-05 |            0.000324094 |
# | MCMC (nÂ° 3)                |          8.60141e-07 |    1.66227e-12 |    0.000979011 |            3.14452e-05 |            0.000316173 |
# | MCMC (nÂ° 4)                |          8.86752e-07 |    1.62794e-12 |     0.00095145 |            3.02972e-05 |            0.000314076 |

**** SOxP - SOxSO
#+TBLNAME: soxp_soxso
|                           | $\theta_\mathrm{MC}$ | $A_\mathrm{s}$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ |
|---------------------------+----------------------+----------------+----------------+------------------------+------------------------|
| MCMC (nÂ° 2)               |          4.37106e-07 |    7.95761e-13 |     0.00046037 |             1.4894e-05 |            0.000152093 |
| Min. ($\ell\in[2;3000]$)  |          2.53148e-06 |    7.13821e-12 |     0.00291831 |            0.000104709 |             0.00135525 |
| Min. ($\ell\in[50;2000]$) |          2.03202e-06 |    5.97189e-12 |     0.00261404 |            8.41646e-05 |             0.00127252 |
| Min. ($\ell\in[50;1500]$) |          9.88702e-07 |    2.64955e-12 |     0.00126386 |            4.27381e-05 |            0.000495158 |

**** Plotting everything
#+BEGIN_SRC ipython :session bcv :results raw drawer :var data1=soxso_pxp :var data2=soxp_soxso
  ref_std = np.array(data1[0][1:], dtype=np.float)
  fig, ax = plt.subplots(1, 2, sharex='col', sharey='row', figsize=(10, 6))
  xlabels = labels[:-1]; xlabels[1] = xlabels[-1]
  x = np.arange(5)
  for i in range(1, len(data1)):
      values = np.array(data1[i][1:], dtype=np.float)
      ax[0].plot(x, ref_std/values-1, "o")
  ax[0].set_ylabel(r"$\Delta_\sigma$ (Planck)")
  ax[0].set_title("SOxSO - PxP")
  ax[0].set_xticks(x)
  ax[0].set_xticklabels(xlabels)

  for i in range(0, len(data2)):
      values = np.array(data2[i][1:], dtype=np.float)
      ax[1].plot(x, ref_std/values-1, "o", label=data2[i][0])

  ax[1].set_title("SOxP - SOxSO")
  ax[1].set_xticks(x)
  ax[1].set_xticklabels(xlabels)
  ax[1].legend(loc="upper left", bbox_to_anchor=(1,1))
  plt.subplots_adjust(wspace=0.1)
#+END_SRC

#+RESULTS:
:results:
# Out[274]:
[[file:./obipy-resources/FFxMxt.png]]
:end:
