#+TITLE: Beyond Cosmic Variance Analysis

* Preamble
#+BEGIN_SRC ipython :session bcv :results none
  %matplotlib inline
  import matplotlib.pyplot as plt
  plt.rcParams["text.usetex"] = True
  import pandas as pd
  import numpy as np
  from getdist import plots, MCSamples
  from IPython.display import HTML, display
  import tabulate
  import glob
#+END_SRC

* Plot cosmological parameters distribution
** Cosmo. parameters LaTeX labels
#+BEGIN_SRC ipython :session bcv :results none
  labels = [r"$\theta_\mathrm{MC}$",
            r"$A_\mathrm{s}$",
            r"$n_\mathrm{s}$",
            r"$\Omega_\mathrm{b}h^2$",
            r"$\Omega_\mathrm{c}h^2$",
            r"$\chi^2-\chi^2_\mathrm{min}$"]
#+END_SRC

** Get cosmo. parameters from output file
#+BEGIN_SRC ipython :session bcv :results none
  def get_params(path, pattern="*.likelihood", weight=False):
      import os, glob
      all_files = glob.glob(os.path.join(path, pattern))
      # Sort alphabetically
      all_files.sort()

      header = pd.read_csv(all_files[0], delim_whitespace=True).columns[1:]
      df = pd.concat((pd.read_table(f, delim_whitespace=True) for f in all_files))

      # Remove '#' in header
      df.drop(df.columns[[-1,]], axis=1, inplace=True)
      df.columns = header
      # Compute delta chi2
      delta_chi2 = df.chi2-np.min(df.chi2)
      # Remove useless columns
      df.drop(columns=["weight", "minuslogpost", "minuslogprior", "minuslogprior__0", "chi2", "chi2__chi2"], inplace=True)
      # Insert Delta chi2 before As (which is derived and never plot)
      df.insert(value=delta_chi2, column="delta_chi2", loc=len(df.columns))

      params = np.array(df)
      return params
#+END_SRC

** Show input values of cosmo. parameters
#+BEGIN_SRC ipython :session bcv :results none
  def show_ref(g):
      ref = [1.04164/100, np.exp(3.058)/1e10, 0.9649, 0.02212, 0.1210]
      for i, r in enumerate(ref):
          kwargs = dict(color="gray", ls="--", lw=1)
          for ax in g.subplots[:,i]:
              if ax: ax.axvline(r, **kwargs)
          for ax in g.subplots[i,:i]:
              if ax: ax.axhline(r, **kwargs)
#+END_SRC
** Results from pure Planck simulation
*** Cosmo. parameters distribution
#+BEGIN_SRC ipython :session bcv :results none
  params = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/unbinned")
  samples = MCSamples(samples=params, names=labels)
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results raw drawer
  g = plots.getSubplotPlotter()
  g.settings.colormap = "inferno"
  g.triangle_plot(samples, params=labels[:-1], shaded=True)
  show_ref(g)
#+END_SRC

#+RESULTS:
:results:
# Out[1100]:
[[file:./obipy-resources/Qnku27.png]]
:end:

#+BEGIN_SRC ipython :session bcv :results raw drawer
  g = plots.getSubplotPlotter()
  g.settings.colormap_scatter = "inferno"
  g.triangle_plot(samples, params=labels[:-1],
                  plot_3d_with_param="$\chi^2-\chi^2_\mathrm{min}$", scatter_size=20)
  show_ref(g)
#+END_SRC

#+RESULTS:
:results:
# Out[1101]:
[[file:./obipy-resources/O10Mbg.png]]
:end:

#+BEGIN_SRC ipython :session bcv :results output
  print("Number of sucessful minimization :", np.alen(params))
#+END_SRC

#+RESULTS:
: Number of sucessful minimization : 638

#+BEGIN_SRC ipython :session bcv :results none
  min_mean = np.mean(params, axis=0)
  min_std  = np.std(params, axis=0)
  fisher = np.array([5.1265507267143515e-06, 1.2854648947626772e-11, 0.005589724100405197, 0.00020382255228959767, 0.002334040314343261, 1.])
  lines = [[r"$\mu$"], [r"$\sigma$"], [r"$\sigma$ (Fisher)"], [r"$\Delta\sigma$ (min-Fisher) [%]"]]
  table = np.stack([min_mean, min_std, fisher, 100*(min_std-fisher)/fisher])
  table = np.append(lines, table, axis=1)
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results raw drawer
  display(HTML(tabulate.tabulate(table, headers=labels, tablefmt="html")))
#+END_SRC

#+RESULTS:
:results:
# Out[17]:
: <IPython.core.display.HTML object>
:end:

*** Org table                                                    :noexport:

#+BEGIN_SRC ipython :session bcv :results raw output :export none
  print(tabulate.tabulate(table, headers=labels, tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|                                 | $\theta_\mathrm{MC}$ | $A_\mathrm{s}$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ | $\chi^2-\chi^2_\mathrm{min}$ |
|---------------------------------+----------------------+----------------+----------------+------------------------+------------------------+------------------------------|
| $\mu$                           |            0.0104162 |    2.12887e-09 |       0.964695 |              0.0221223 |                0.12108 |                      460.202 |
| $\sigma$                        |          4.99937e-06 |    1.24047e-11 |     0.00544548 |            0.000206822 |              0.0022281 |                      153.421 |
| $\sigma$ (Fisher)               |          5.12655e-06 |    1.28546e-11 |     0.00558972 |            0.000203823 |             0.00233404 |                            1 |
| $\Delta\sigma$ (min-Fisher) [%] |             -2.48081 |        -3.5002 |       -2.58047 |                1.47141 |                -4.5391 |                      15242.1 |

* Simons Observatory âŠ— Planck
** \ell \in [2; 3000]
#+BEGIN_SRC ipython :session bcv :results raw drawer
  params_SO   = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/ell_2_3000", "*SO.likelihood")
  params_SOxP = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/ell_2_3000", "*SOxP.likelihood")
  params_P    = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/ell_2_3000", "*_P.likelihood")
  params_SO.shape, params_SOxP.shape, params_P.shape
#+END_SRC

#+RESULTS:
:results:
# Out[1085]:
: ((978, 6), (978, 6), (978, 6))
:end:
*** Triangle plot
#+BEGIN_SRC ipython :session bcv :results none
  samples_SO   = MCSamples(samples=params_SO, names=labels, label="SOxSO")
  samples_SOxP = MCSamples(samples=params_SOxP, names=labels, label="SOxP")
  samples_P    = MCSamples(samples=params_P, names=labels, label="PxP")
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results raw drawer
  g = plots.getSubplotPlotter()
  g.triangle_plot([samples_SO, samples_SOxP, samples_P], params=labels[:-1])
  show_ref(g)
#+END_SRC

#+RESULTS:
:results:
# Out[1092]:
[[file:./obipy-resources/xEOpts.png]]
:end:

*** Variances of parameters
#+BEGIN_SRC ipython :session bcv :results none
  lines = [[r"$\mu$(SOxSO)"], [r"$\mu$(SOxP)"], [r"$\mu$(PxP)"],
           [r"$\sigma$(SOxSO)"], [r"$\sigma$(SOxP)"], [r"$\sigma$(PxP)"],
           [r"$\sigma$(SOxSO - PxP)"], [r"$\sigma$(SOxSO - SOxP)"], [r"$\sigma$(SOxSO + PxP - 2 SOxP)"]]
  std_SO, std_SOxP, std_P = np.std(params_SO, axis=0), np.std(params_SOxP, axis=0), np.std(params_P, axis=0)
  std_SOmP = np.std(params_SO-params_P, axis=0)
  std_SOmSOxP = np.std(params_SO-params_SOxP, axis=0)
  std_SOpPm2SOxP = np.std(params_SO + params_P - 2*params_SOxP, axis=0)
  table = np.stack([np.mean(params_SO, axis=0),
                    np.mean(params_SOxP, axis=0),
                    np.mean(params_P, axis=0),
                    std_SO, std_SOxP, std_P,
                    std_SOmP, std_SOmSOxP, std_SOpPm2SOxP
  ])
  table = np.append(lines, table, axis=1)
  display(HTML(tabulate.tabulate(table, headers=labels, tablefmt="html")))
#+END_SRC

Set PxP deviation as standard for further comparison
#+BEGIN_SRC ipython :session bcv :results none
  ref_std = std_P
  print(ref_std)
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results raw drawer
  x = np.arange(5)
  plt.plot(x, (ref_std/std_SO)[:-1], "o", label="SOxSO")
  plt.plot(x, (ref_std/std_SOxP)[:-1], "o", label="SOxP")
  plt.plot(x, (ref_std/std_SOmP)[:-1], "o", label="SOxSO-PxP")
  plt.plot(x, (ref_std/std_SOmSOxP)[:-1], "o", label="SOxSO-SOxP")
  plt.plot(x, (ref_std/std_SOpPm2SOxP)[:-1], "o", label="SOxSO+PxP-2SOxP")
  plt.xticks(x, labels[:-1])
  plt.ylabel(r"$\Delta_\sigma$ (/Planck)")
  plt.legend(loc="upper left", title=r"$\ell\in[2; 3000]$", bbox_to_anchor=(1,1))
#+END_SRC

#+RESULTS:
:results:
# Out[1098]:
: <matplotlib.legend.Legend at 0x7fcbe6e15cf8>
[[file:./obipy-resources/byLexB.png]]
:end:

**** Org table                                                  :noexport:
#+BEGIN_SRC ipython :session bcv :results raw output
  print(tabulate.tabulate(table, headers=labels, tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|                                | $\theta_\mathrm{MC}$ | $A_\mathrm{s}$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ | $\chi^2-\chi^2_\mathrm{min}$ |
|--------------------------------+----------------------+----------------+----------------+------------------------+------------------------+------------------------------|
| $\mu$(SOxSO)                   |            0.0104163 |     2.1288e-09 |       0.964831 |              0.0221165 |               0.121037 |                      491.874 |
| $\mu$(SOxP)                    |            0.0104162 |    2.12874e-09 |       0.964837 |              0.0221241 |               0.121029 |                      482.606 |
| $\mu$(PxP)                     |            0.0104161 |    2.12891e-09 |       0.964766 |              0.0221283 |               0.121065 |                      395.489 |
| $\sigma$(SOxSO)                |          3.30158e-06 |    8.82142e-12 |     0.00403527 |            0.000113061 |             0.00147556 |                      155.132 |
| $\sigma$(SOxP)                 |          4.13856e-06 |    1.10042e-11 |      0.0048009 |            0.000153239 |             0.00196259 |                      155.961 |
| $\sigma$(PxP)                  |          4.88563e-06 |    1.22407e-11 |     0.00529792 |            0.000204028 |              0.0022389 |                      149.562 |
| $\sigma$(SOxSO - PxP)          |          3.76192e-06 |    9.58206e-12 |     0.00406034 |            0.000171957 |             0.00181588 |                      148.291 |
| $\sigma$(SOxSO - SOxP)         |          2.53148e-06 |    7.13821e-12 |     0.00291831 |            0.000104709 |             0.00135525 |                      125.786 |
| $\sigma$(SOxSO + PxP - 2 SOxP) |          3.28542e-06 |    9.16644e-12 |     0.00375188 |            0.000160698 |             0.00174672 |                      209.039 |

** \ell \in [50; 2000]
#+BEGIN_SRC ipython :session bcv :results raw drawer
  params_SO   = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/ell_50_2000", "*SO.likelihood")
  params_SOxP = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/ell_50_2000", "*SOxP.likelihood")
  params_P    = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/ell_50_2000", "*_P.likelihood")
  params_SO.shape, params_SOxP.shape, params_P.shape
#+END_SRC

#+RESULTS:
:results:
# Out[877]:
: ((971, 6), (971, 6), (971, 6))
:end:
*** Triangle plot
#+BEGIN_SRC ipython :session bcv :results none
  samples_SO   = MCSamples(samples=params_SO, names=labels, label="SOxSO")
  samples_SOxP = MCSamples(samples=params_SOxP, names=labels, label="SOxP")
  samples_P    = MCSamples(samples=params_P, names=labels, label="PxP")
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results raw drawer
  g = plots.getSubplotPlotter()
  g.triangle_plot([samples_SO, samples_SOxP, samples_P], params=labels[:-1])
  show_ref(g)
#+END_SRC

#+RESULTS:
:results:
# Out[881]:
[[file:./obipy-resources/ARl6ns.png]]
:end:

*** Variances of parameters
#+BEGIN_SRC ipython :session bcv :results none
  lines = [[r"$\mu$(SOxSO)"], [r"$\mu$(SOxP)"], [r"$\mu$(PxP)"],
           [r"$\sigma$(SOxSO)"], [r"$\sigma$(SOxP)"], [r"$\sigma$(PxP)"],
           [r"$\sigma$(SOxSO - PxP)"], [r"$\sigma$(SOxSO - SOxP)"], [r"$\sigma$(SOxSO + PxP - 2 SOxP)"]]
  std_SO, std_SOxP, std_P = np.std(params_SO, axis=0), np.std(params_SOxP, axis=0), np.std(params_P, axis=0)
  std_SOmP = np.std(params_SO-params_P, axis=0)
  std_SOmSOxP = np.std(params_SO-params_SOxP, axis=0)
  std_SOpPm2SOxP = np.std(params_SO + params_P - 2*params_SOxP, axis=0)
  table = np.stack([np.mean(params_SO, axis=0),
                    np.mean(params_SOxP, axis=0),
                    np.mean(params_P, axis=0),
                    std_SO, std_SOxP, std_P,
                    std_SOmP, std_SOmSOxP, std_SOpPm2SOxP
  ])
  table = np.append(lines, table, axis=1)
  display(HTML(tabulate.tabulate(table, headers=labels, tablefmt="html")))
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results raw drawer
  x = np.arange(5)
  plt.plot(x, (ref_std/std_SO-1)[:-1], "o", label="SO")
  plt.plot(x, (ref_std/std_SOxP-1)[:-1], "o", label="SOxP")
  plt.plot(x, (ref_std/std_SOmP-1)[:-1], "o", label="SO-P")
  plt.plot(x, (ref_std/std_SOmSOxP-1)[:-1], "o", label="SO-SOxP")
  plt.plot(x, (ref_std/std_SOpPm2SOxP-1)[:-1], "o", label="SO+P-2SOxP")
  plt.xticks(x, labels[:-1])
  plt.ylabel(r"$\Delta_\sigma$ (Planck)")
  plt.legend(loc="upper left", title=r"$\ell\in[50; 2000]$", bbox_to_anchor=(1,1))
#+END_SRC

#+RESULTS:
:results:
# Out[885]:
: <matplotlib.legend.Legend at 0x7fcbec53e7b8>
[[file:./obipy-resources/NM7IJU.png]]
:end:

**** Org table                                                  :noexport:
#+BEGIN_SRC ipython :session bcv :results raw output
  print(tabulate.tabulate(table, headers=labels, tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|                               | $\theta_\mathrm{MC}$ | $A_\mathrm{s}$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ | $\chi^2/\mathrm{ndf}$ |
|-------------------------------+----------------------+----------------+----------------+------------------------+------------------------+-----------------------|
| $\mu$(SOxSO)                  |            0.0104165 |    2.12888e-09 |       0.964796 |               0.022119 |               0.121061 |               1.00019 |
| $\mu$(SOxP)                   |            0.0104165 |    2.12863e-09 |       0.964918 |              0.0221197 |               0.121011 |               1.00034 |
| $\mu$(PxP)                    |            0.0104164 |    2.12876e-09 |       0.964918 |               0.022122 |               0.121043 |               1.00003 |
| $\sigma$(SOxSO)               |          4.35923e-06 |    1.19063e-11 |     0.00529269 |            0.000197395 |             0.00208537 |             0.0319118 |
| $\sigma$(SOxP)                |          4.70511e-06 |    1.28073e-11 |     0.00574473 |            0.000196329 |             0.00236035 |             0.0321642 |
| $\sigma$(PxP)                 |          5.16462e-06 |    1.32325e-11 |     0.00592473 |            0.000214703 |             0.00238011 |             0.0327516 |
| $\sigma$(SOxSO - PxP)         |          2.99731e-06 |    7.16794e-12 |     0.00314853 |            0.000122405 |             0.00133315 |             0.0201569 |
| $\sigma$(SOxSO - SOxP)        |          2.03202e-06 |    5.97189e-12 |     0.00261404 |            8.41646e-05 |             0.00127252 |             0.0126795 |
| $\sigma$(SOxSO + PxP - 2 SOxP |          3.05013e-06 |    9.43821e-12 |     0.00429037 |            0.000118191 |             0.00217506 |             0.0185606 |

** \ell \in [50; 1500]
#+BEGIN_SRC ipython :session bcv :results raw drawer
  params_SO   = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/ell_50_1500", "*SO.likelihood")
  params_SOxP = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/ell_50_1500", "*SOxP.likelihood")
  params_P    = get_params(r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/ell_50_1500", "*_P.likelihood")
  params_SO.shape, params_SOxP.shape, params_P.shape
#+END_SRC

#+RESULTS:
:results:
# Out[886]:
: ((1001, 6), (1001, 6), (1001, 6))
:end:
*** Triangle plot
#+BEGIN_SRC ipython :session bcv :results none
  samples_SO   = MCSamples(samples=params_SO, names=labels, label="SOxSO")
  samples_SOxP = MCSamples(samples=params_SOxP, names=labels, label="SOxP")
  samples_P    = MCSamples(samples=params_P, names=labels, label="PxP")
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results raw drawer
  g = plots.getSubplotPlotter()
  g.triangle_plot([samples_SO, samples_SOxP, samples_P], params=labels[:-1])
  show_ref(g)
#+END_SRC

#+RESULTS:
:results:
# Out[888]:
[[file:./obipy-resources/QXWKEY.png]]
:end:

*** Variances of parameters
#+BEGIN_SRC ipython :session bcv :results none
  lines = [[r"$\mu$(SOxSO)"], [r"$\mu$(SOxP)"], [r"$\mu$(PxP)"],
           [r"$\sigma$(SOxSO)"], [r"$\sigma$(SOxP)"], [r"$\sigma$(PxP)"],
           [r"$\sigma$(SOxSO - PxP)"], [r"$\sigma$(SOxSO - SOxP)"], [r"$\sigma$(SOxSO + PxP - 2 SOxP)"]]
  std_SO, std_SOxP, std_P = np.std(params_SO, axis=0), np.std(params_SOxP, axis=0), np.std(params_P, axis=0)
  std_SOmP = np.std(params_SO-params_P, axis=0)
  std_SOmSOxP = np.std(params_SO-params_SOxP, axis=0)
  std_SOpPm2SOxP = np.std(params_SO + params_P - 2*params_SOxP, axis=0)
  table = np.stack([np.mean(params_SO, axis=0),
                    np.mean(params_SOxP, axis=0),
                    np.mean(params_P, axis=0),
                    std_SO, std_SOxP, std_P,
                    std_SOmP, std_SOmSOxP, std_SOpPm2SOxP
  ])
  table = np.append(lines, table, axis=1)
  display(HTML(tabulate.tabulate(table, headers=labels, tablefmt="html")))
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results raw drawer
  x = np.arange(5)
  plt.plot(x, (ref_std/std_SO-1)[:-1], "o", label="SO")
  plt.plot(x, (ref_std/std_SOxP-1)[:-1], "o", label="SOxP")
  plt.plot(x, (ref_std/std_SOmP-1)[:-1], "o", label="SO-P")
  plt.plot(x, (ref_std/std_SOmSOxP-1)[:-1], "o", label="SO-SOxP")
  plt.plot(x, (ref_std/std_SOpPm2SOxP-1)[:-1], "o", label="SO+P-2SOxP")
  plt.xticks(x, labels[:-1])
  plt.ylabel(r"$\Delta_\sigma$ (Planck)")
  plt.legend(loc="upper left", title=r"$\ell\in[50; 1500]$", bbox_to_anchor=(1,1))
#+END_SRC

#+RESULTS:
:results:
# Out[890]:
: <matplotlib.legend.Legend at 0x7fcbe69a05c0>
[[file:./obipy-resources/qVqYAE.png]]
:end:

**** Org table                                                  :noexport:
#+BEGIN_SRC ipython :session bcv :results raw output
  print(tabulate.tabulate(table, headers=labels, tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|                                | $\theta_\mathrm{MC}$ | $A_\mathrm{s}$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ | $\chi^2-\chi^2_\mathrm{min}$ |
|--------------------------------+----------------------+----------------+----------------+------------------------+------------------------+------------------------------|
| $\mu$(SOxSO)                   |            0.0104164 |    2.12863e-09 |       0.965054 |              0.0221352 |               0.120982 |                      438.048 |
| $\mu$(SOxP)                    |            0.0104164 |    2.12874e-09 |       0.964994 |              0.0221343 |               0.121002 |                      432.316 |
| $\mu$(PxP)                     |            0.0104164 |    2.12879e-09 |       0.964959 |              0.0221337 |                0.12101 |                      419.556 |
| $\sigma$(SOxSO)                |          6.33122e-06 |    1.52994e-11 |     0.00712238 |             0.00025782 |             0.00282717 |                      109.152 |
| $\sigma$(SOxP)                 |          6.34361e-06 |    1.52274e-11 |     0.00707437 |            0.000258408 |             0.00281993 |                      109.211 |
| $\sigma$(PxP)                  |          6.51112e-06 |    1.54247e-11 |     0.00720613 |            0.000264971 |             0.00285429 |                      109.122 |
| $\sigma$(SOxSO - PxP)          |          1.83962e-06 |    4.23374e-12 |     0.00213334 |            7.39648e-05 |            0.000775876 |                      34.0135 |
| $\sigma$(SOxSO - SOxP)         |          9.87789e-07 |    2.64961e-12 |     0.00126339 |            4.27526e-05 |            0.000494945 |                       17.241 |
| $\sigma$(SOxSO + PxP - 2 SOxP) |          8.42738e-07 |    3.20894e-12 |     0.00141523 |            4.80156e-05 |            0.000616931 |                      9.56108 |

* MCMC analysis
** Understanding MCMC /Ã  la/ cobaya
We run several MCMC for PxP survey (\ell 2; 3000) and *use the covariance matrix from Fisher*
calculation as input of =cobaya= MCMC algorithm. We check how the input covariance matrix changes the
MCMC convergence. Basically, we do the following tests:
- Covariance matrix/2
- Covariance matrix
- Covariance matrix*2
- Covariance matrix*4

#+BEGIN_SRC ipython :session bcv :results none
  labels = [r"$\theta_\mathrm{MC}$",
            r"$\log(10^{10}A_\mathrm{s})$",
            r"$n_\mathrm{s}$",
            r"$\Omega_\mathrm{b}h^2$",
            r"$\Omega_\mathrm{c}h^2$",
            r"$\chi^2-\chi^2_\mathrm{min}$",
            r"$A_\mathrm{s}$"]

  result_path=r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/fisher"
#+END_SRC

*** Covariance matrix divide by 2
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_chains(result_path + "/0.5/*_PxP_*/mcmc*.txt", burnin=0)
#+END_SRC

#+RESULTS:
:results:
# Out[58]:
[[file:./obipy-resources/KsgZNm.png]]
:end:

*** Initial covariance matrix
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_chains(result_path + "/1/*_PxP_*/mcmc*.txt", burnin=0)
#+END_SRC

#+RESULTS:
:results:
# Out[57]:
[[file:./obipy-resources/mxPD8G.png]]
:end:

*** Covariance matrix multiply by 2
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_chains(result_path + "/2/*_PxP_*/mcmc*.txt", burnin=0)
#+END_SRC

#+RESULTS:
:results:
# Out[56]:
[[file:./obipy-resources/xfa5zM.png]]
:end:

*** Covariance matrix multiply by 4
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_chains(result_path + "/4/*_PxP_*/mcmc*.txt", burnin=0)
#+END_SRC

#+RESULTS:
:results:
# Out[9]:
[[file:./obipy-resources/VCVPbu.png]]
:end:

*** Remove =proposal_scale=
By default there is a =proposal_scale= parameter for =cobaya= MCMC which is set to 2.4. Here we set it
to 1 and check the results
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_chains(result_path + "/no_proposal_scale/*_PxP_*/mcmc*.txt", burnin=0)
#+END_SRC

#+RESULTS:
:results:
# Out[55]:
[[file:./obipy-resources/PUylZd.png]]
:end:

*** Fix Î§Â²
Fix likelihood definition by adding a 1/2 factor
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_chains(result_path + "/fix_chi2/*_PxP_*/mcmc*.txt", burnin=0)
#+END_SRC

#+RESULTS:
:results:
# Out[71]:
[[file:./obipy-resources/l91d5L.png]]
:end:

*** Plotting variances /vs./ Fisher results
#+BEGIN_SRC ipython :session bcv :results raw drawer
  fisher = np.array([5.126550726714351e-06, 0.006039315179940597, 0.005589724100405183, 0.00020382255228959761, 0.002334040314343254])
  def get_variance_ratio(scale_factor):
      mcmc = get_mcmc_variances(result_path + "/{}/*_PxP_*/mcmc*.txt".format(scale_factor))
      mcmc = np.mean(np.array(mcmc[:, 1:], dtype=np.float), axis=0)
      return fisher/mcmc

  def get_variance_from_covmat(scale_factor):
      all_files = glob.glob(result_path + "/{}/*/mcmc.covmat".format(scale_factor))
      variances = np.zeros((len(all_files), 5))
      for i, f in enumerate(all_files):
          cov = np.loadtxt(f)
          variances[i, :] = np.sqrt(np.diag(cov))
      return fisher/np.mean(variances, axis=1)

  x = np.arange(len(labels)-2)
  for scale in [0.5, 1, 2, 4]:
    plt.plot(x, get_variance_ratio(scale), "o", label="scale x{}".format(scale))
    # y = get_variance_from_covmat(scale)
    # print(y)
  plt.plot(x, get_variance_ratio("no_proposal_scale"), "o", label="no proposal scale".format(scale))
  plt.plot(x, get_variance_ratio("fix_chi2"), "o", label="fix chi2".format(scale))
  # plt.plot(x, get_variance_from_covmat("fich_chi2"), "s", label="fix chi2 (from covmat)")

  plt.axhline(1, color="gray", ls="--", lw=1)
  plt.ylabel(r"$\sigma$(Fisher)/$\sigma$(MCMC)")
  plt.xticks(x, labels[:-2])
  plt.legend(loc="upper left", bbox_to_anchor=(1,1))
#+END_SRC

#+RESULTS:
:results:
# Out[70]:
: <matplotlib.legend.Legend at 0x7f22e5f68400>
[[file:./obipy-resources/8ywhB4.png]]
:end:

** \Lambda CDM
*** Check chains
#+BEGIN_SRC ipython :session bcv :results none
  labels = [r"$\theta_\mathrm{MC}$",
            r"$\log(10^{10}A_\mathrm{s})$",
            r"$n_\mathrm{s}$",
            r"$\Omega_\mathrm{b}h^2$",
            r"$\Omega_\mathrm{c}h^2$",
            r"$\chi^2-\chi^2_\mathrm{min}$",
            r"$A_\mathrm{s}$"]

  result_path=r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/mcmc"
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results none
  def get_chains(path):
      import glob
      all_files = glob.glob(path)
      # Sort alphabetically
      all_files.sort()
      chains = {}
      for f in all_files:
          header = pd.read_csv(all_files[0], delim_whitespace=True).columns[1:]
          df = pd.read_table(f, delim_whitespace=True)

          # Remove '#' in header
          df.drop(df.columns[[-1,]], axis=1, inplace=True)
          df.columns = header
          # Compute delta chi2
          delta_chi2 = df.chi2-np.min(df.chi2)

          # Remove useless columns
          df.drop(columns=["minuslogpost", "minuslogprior", "minuslogprior__0", "chi2", "chi2__chi2"], inplace=True)
          # Insert Delta chi2 before As (which is derived and never plot)
          df.insert(value=delta_chi2, column="delta_chi2", loc=len(df.columns)-1)
          key = f.split("/")[-2]
          chains[key] = df
      return chains

  ref = [1.04164/100, 3.058, 0.9649, 0.02212, 0.1210, 1]
  def plot_chains(path, burnin=0, labels=labels):
      chains = get_chains(path=path)
      plt.figure(figsize=(18, 10))
      for i in range(1, len(labels)):
          plt.subplot(2, 4, i)
          plt.ylabel(labels[i-1])
          for k, v in chains.items():
              j = k.split("_")[-1]
              n = np.arange(len(v))
              if 0 < burnin < 1:
                  ist = int((1.-burnin)*len(v))
              else:
                  ist = int(burnin)
              plt.plot(n[ist:], v.iloc[:,i][ist:], alpha=0.75, color="C{}".format(j))
          if i != len(labels)-1:
              plt.axhline(ref[i-1], color="gray", ls="--", lw=1)
      plt.subplots_adjust(hspace=0.25, wspace=0.3)
      plt.legend([k.replace("_", "\_") for k in chains.keys()], loc="upper left", bbox_to_anchor=(1,1))
#+END_SRC
**** PxP
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_chains(result_path + "/*_PxP_*/mcmc*.txt", burnin=0)
#+END_SRC

#+RESULTS:
:results:
# Out[1038]:
[[file:./obipy-resources/EiiqVS.png]]
:end:

**** SOxSO - PxP
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_chains(result_path + "/*_SOxSO-PxP_*/mcmc*.txt", burnin=0)
#+END_SRC

#+RESULTS:
:results:
# Out[949]:
[[file:./obipy-resources/VMO7nV.png]]
:end:

**** SOxP - PxP
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_chains(result_path + "/*_SOxP-PxP*/mcmc*.txt", burnin=0)
#+END_SRC

#+RESULTS:
:results:
# Out[862]:
[[file:./obipy-resources/2VFaUD.png]]
:end:

**** SOxP - SOxSO
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_chains(result_path + "/*_SOxP-SOxSO*/mcmc*.txt", burnin=0)
#+END_SRC

#+RESULTS:
:results:
# Out[633]:
[[file:./obipy-resources/omO1vo.png]]
:end:

*** Triangle plot

#+BEGIN_SRC ipython :session bcv :results none
  def get_samples(path):
      chains = get_chains(path)
      key = next(iter(chains))
      samples = chains[key].iloc[:, 1:].values
      weights = chains[key].iloc[:, 0].values
      return samples, weights
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results raw drawer
  samples = []
  s, w = get_samples(result_path + "/*_SOxP-SOxSO*2/mcmc*.txt")
  samples += [MCSamples(samples=s, names=labels, label="SOxP - SOxSO", weights=w, ignore_rows=0.3)]

  for i in [0, 1, 3, 4]:
      s, w = get_samples(result_path + "/*_SOxSO-PxP*{}/mcmc*.txt".format(i))
      samples += [MCSamples(samples=s, names=labels, label="SOxSO - PxP - {}".format(i), weights=w, ignore_rows=0.3)]
  for i in range(5):
      s, w = get_samples(result_path + "/*_PxP*{}/mcmc*.txt".format(i))
      samples += [MCSamples(samples=s, names=labels, label="PxP - {}".format(i), weights=w, ignore_rows=0.3)]

  g = plots.getSubplotPlotter()
  g.triangle_plot(samples, params=labels[:-2])
#+END_SRC

#+RESULTS:
:results:
# Out[1043]:
[[file:./obipy-resources/k6523h.png]]
:end:

*** Plot variances from MCMC and Hessian
**** Compute standard deviation from MCMC
#+BEGIN_SRC ipython :session bcv :results none
  def get_mcmc_variances(path, burnin=0.3, keep_As=False):
      table = []
      lines = []
      all_files = glob.glob(path)
      all_files.sort()
      for f in all_files:
          samples, weights = get_samples(f)
          mcsamples = MCSamples(samples=samples, weights=weights, ignore_rows=burnin)
          sigmas = np.sqrt(mcsamples.getVars()).tolist()
          if keep_As:
              del sigmas[-2]
              table += [sigmas]
          else:
              table += [sigmas[:-2]]
          lines += [[f.split("/")[-2]]]
      table = np.append(lines, table, axis=1)
      return table
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results none
  table = get_mcmc_variances(result_path + "/results*/mcmc*.txt")
  display(HTML(tabulate.tabulate(table, headers=labels[:-2], tablefmt="html")))
#+END_SRC

***** =org= table                                              :noexport:
#+BEGIN_SRC ipython :session bcv :results raw output
  print(tabulate.tabulate(table, headers=labels[:-2], tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|                        | $\theta_\mathrm{MC}$ | $\log(10^{10}A_\mathrm{s})$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ |
|------------------------+----------------------+-----------------------------+----------------+------------------------+------------------------|
| results_PxP_667_0      |          3.72909e-06 |                  0.00417638 |     0.00389413 |            0.000145411 |             0.00159717 |
| results_PxP_667_1      |          3.57642e-06 |                  0.00422906 |     0.00396238 |            0.000143895 |             0.00163655 |
| results_PxP_667_2      |          3.55353e-06 |                  0.00429424 |     0.00394772 |            0.000144947 |             0.00163285 |
| results_PxP_667_3      |          3.52397e-06 |                  0.00421843 |     0.00391569 |            0.000135441 |             0.00160636 |
| results_PxP_667_4      |          3.53659e-06 |                  0.00420714 |     0.00398142 |            0.000146265 |             0.00162171 |
| results_SOxP-PxP_667_0 |          4.31904e-07 |                 0.000403276 |    0.000511504 |            1.58353e-05 |            0.000165415 |
| results_SOxP-PxP_667_2 |          4.56856e-07 |                 0.000391472 |    0.000511549 |            1.60144e-05 |            0.000161055 |
| results_SOxP-PxP_667_3 |          3.88202e-06 |                  0.00337982 |      0.0027732 |            5.77201e-09 |             0.00019168 |
| results_SOxP-PxP_667_4 |           1.0527e-06 |                  0.00133597 |     0.00160094 |            5.11123e-05 |            0.000555544 |
| results_SOxP-SOxSO_0   |          7.72041e-07 |                 0.000878449 |     0.00115087 |            4.20484e-05 |            0.000372655 |
| results_SOxP-SOxSO_1   |          1.25393e-05 |                  0.00451828 |     0.00715077 |            0.000256968 |             0.00223155 |
| results_SOxP-SOxSO_2   |          4.37106e-07 |                 0.000373563 |     0.00046037 |             1.4894e-05 |            0.000152093 |
| results_SOxSO-PxP_0    |          8.42204e-07 |                 0.000796194 |    0.000987998 |            2.94139e-05 |             0.00032552 |
| results_SOxSO-PxP_1    |          8.62444e-07 |                 0.000791945 |     0.00100539 |            3.13933e-05 |            0.000324094 |
| results_SOxSO-PxP_3    |          8.60141e-07 |                 0.000779817 |    0.000979011 |            3.14452e-05 |            0.000316173 |
| results_SOxSO-PxP_4    |          8.86752e-07 |                  0.00076371 |     0.00095145 |            3.02972e-05 |            0.000314076 |

**** Compare MCMC to minimization and Fisher
| PxP                             | $\theta_\mathrm{MC}$ | $A_\mathrm{s}$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ |
|---------------------------------+----------------------+----------------+----------------+------------------------+------------------------|
| $\sigma$ (Minimization)         |          4.99937e-06 |    1.24047e-11 |     0.00544548 |            0.000206822 |              0.0022281 |
| $\sigma$ (Minimization 2;3000)  |          4.88563e-06 |    1.22407e-11 |     0.00529792 |            0.000204028 |              0.0022389 |
| $\sigma$ (Fisher)               |          5.12655e-06 |    1.28546e-11 |     0.00558972 |            0.000203823 |             0.00233404 |
| $\sigma$ (MCMC)                 |          3.60082e-06 |    0.89984e-11 |     0.00394778 |            0.000143322 |             0.00162962 |
| $\Delta\sigma$ (min-Fisher) [%] |             -2.48081 |        -3.5002 |       -2.58047 |                1.47141 |                -4.5391 |
|---------------------------------+----------------------+----------------+----------------+------------------------+------------------------|
| SOxSO                           | $\theta_\mathrm{MC}$ | $A_\mathrm{s}$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ |
|---------------------------------+----------------------+----------------+----------------+------------------------+------------------------|
| $\sigma$ (Minimization)         |          3.30158e-06 |    8.82142e-12 |     0.00403527 |            0.000113061 |             0.00147556 |
| $\sigma$ (Fisher)               |          3.31809e-06 |    9.02724e-12 |     0.00410550 |            0.000112680 |             0.00148535 |
|---------------------------------+----------------------+----------------+----------------+------------------------+------------------------|
| SOxP                            | $\theta_\mathrm{MC}$ | $A_\mathrm{s}$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ |
|---------------------------------+----------------------+----------------+----------------+------------------------+------------------------|
| $\sigma$ (Minimization)         |          4.13856e-06 |    1.10042e-11 |      0.0048009 |            0.000153239 |             0.00196259 |
| $\sigma$ (Fisher)               |          4.20292e-06 |    1.13107e-11 |      0.0049306 |            0.000153280 |             0.00199297 |


#+BEGIN_SRC ipython :session bcv :results raw drawer
  for i in np.arange(0, 0.7, 0.1):
      mcmc = get_mcmc_variances(result_path + "/results*_PxP_*[0-4]/mcmc*.txt", keep_As=True, burnin=i)
      mcmc = np.mean(np.array(mcmc[:, 1:], dtype=np.float), axis=0)
      mcmc[1] = mcmc[-1] # Use As for comparison
      plt.plot(ref_std[:-1]/mcmc[:-1], "o", label="burnin {:.1f}".format(i))

  plt.ylabel(r"$\sigma$(Fisher)/$\sigma$(MCMC)$")
  xlabels = [r"$\theta_\mathrm{MC}$",
            r"$A_\mathrm{s}$",
            r"$n_\mathrm{s}$",
            r"$\Omega_\mathrm{b}h^2$",
            r"$\Omega_\mathrm{c}h^2$"]
  plt.xticks(np.arange(len(xlabels)), xlabels)
  plt.legend(loc="upper left", bbox_to_anchor=(1,1))
#+END_SRC

#+RESULTS:
:results:
# Out[1084]:
: <matplotlib.legend.Legend at 0x7fcbe5fb1198>
[[file:./obipy-resources/7t1JvP.png]]
:end:

**** From Hessian
#+BEGIN_SRC ipython :session bcv :results none
  import pickle
  def get_hessians(f):
      d = pickle.load(open(f, "rb"))
      # except:
      #     print("Fail to open {}".format(f))
      #     pass
      hess = d["results"]["OptimizeResult"]["hess_inv"]
      return np.sqrt(np.diagonal(hess))

  def get_hessians_table(path):
      table = []
      lines = []
      files = glob.glob(path)
      files.sort()
      for f in files:
          table += [get_hessians(f).tolist()]
          lines += [[f.split("/")[-2]]]

      table = np.append(lines, table, axis=1)
      return table
#+END_SRC

#+BEGIN_SRC ipython :session bcv :results none
  table = get_hessians_table(result_path + "/output*/min*.pkl")
  display(HTML(tabulate.tabulate(table, headers=labels[:-2], tablefmt="html")))
#+END_SRC

***** =org= table                                              :noexport:
#+BEGIN_SRC ipython :session bcv :results raw output
  print(tabulate.tabulate(table, headers=labels[:-2], tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|                     |   $\theta_\mathrm{MC}$ | $\log(10^{10}A_\mathrm{s})$ |        $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ |
|---------------------+------------------------+-----------------------------+-----------------------+------------------------+------------------------|
| output_SOxP-PxP_3   |            1.27285e-06 |                  0.00151253 |           0.000335953 |            9.12838e-05 |            2.48647e-05 |
| output_SOxP-PxP_4   |            5.11765e-07 |                 0.000347024 |           0.000504766 |            1.63855e-05 |            0.000153263 |
| output_SOxP-SOxSO_0 |            5.22319e-07 |                 0.000321383 |           0.000467955 |            7.77545e-06 |            0.000144856 |
| output_SOxP-SOxSO_1 |             1.1058e-07 |                  0.00158029 |           0.000242349 |            9.15489e-05 |             2.5819e-05 |
| output_SOxP-SOxSO_2 |            4.68394e-07 |                 0.000332471 |           0.000446926 |            7.51214e-06 |            0.000141894 |
| output_SOxSO-PxP_0  |            9.07562e-07 |                 0.000462882 |           0.000710933 |            2.45234e-05 |            0.000173289 |
| output_SOxSO-PxP_1  |            1.00649e-06 |                  0.00234359 |           0.000727028 |            0.000117997 |            0.000562889 |
| output_SOxSO-PxP_3  |            1.04358e-06 |                 0.000916334 |            0.00126595 |            3.51463e-05 |            0.000428267 |
| output_SOxSO-PxP_4  |            1.09634e-06 |                 0.000803228 |            0.00118938 |            3.60983e-05 |            0.000384808 |
**** Summary
***** SOxSO - PxP
#+TBLNAME: soxso_pxp
|                           | $\theta_\mathrm{MC}$ | $A_\mathrm{s}$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ |
|---------------------------+----------------------+----------------+----------------+------------------------+------------------------|
| MCMC PxP                  |       3.59242536e-06 | 8.90430283e-12 | 3.91641588e-03 |         1.41296535e-04 |        1.60043263e-03  |
| MCMC (nÂ° 0)               |          8.42204e-07 |    1.69715e-12 |    0.000987998 |            2.94139e-05 |             0.00032552 |
| Min. ($\ell\in[2;3000]$)  |          3.76192e-06 |    9.58206e-12 |     0.00406034 |            0.000171957 |             0.00181588 |
| Min. ($\ell\in[50;2000]$) |          2.99731e-06 |    7.16794e-12 |     0.00314853 |            0.000122405 |             0.00133315 |
| Min. ($\ell\in[50;1500]$) |           1.8413e-06 |    4.23132e-12 |      0.0021341 |            7.39349e-05 |            0.000775937 |
# | Planck (full $\ell$ range) |          4.88562e-06 |    1.22406e-11 |  0.00529791672 |            2.04027e-04 |          0.00223889971 |
# | MCMC (nÂ° 1)                |          8.62444e-07 |    1.68814e-12 |     0.00100539 |            3.13933e-05 |            0.000324094 |
# | MCMC (nÂ° 3)                |          8.60141e-07 |    1.66227e-12 |    0.000979011 |            3.14452e-05 |            0.000316173 |
# | MCMC (nÂ° 4)                |          8.86752e-07 |    1.62794e-12 |     0.00095145 |            3.02972e-05 |            0.000314076 |
***** SOxP - PxP
#+TBLNAME: soxp_pxp
|             | $\theta_\mathrm{MC}$ | $A_\mathrm{s}$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ |
|-------------+----------------------+----------------+----------------+------------------------+------------------------|
| MCMC (nÂ° 0) |          4.31904e-07 |    0.000403276 |    0.000511504 |            1.58353e-05 |            0.000165415 |
# | MCMC (nÂ° 2) |          4.56856e-07 |    0.000391472 |    0.000511549 |            1.60144e-05 |            0.000161055 |
# | MCMC (nÂ° 3) |          3.88202e-06 |     0.00337982 |      0.0027732 |            5.77201e-09 |             0.00019168 |
# | MCMC (nÂ° 4) |           1.0527e-06 |     0.00133597 |     0.00160094 |            5.11123e-05 |            0.000555544 |

***** SOxP - SOxSO
#+TBLNAME: soxp_soxso
|                           | $\theta_\mathrm{MC}$ | $A_\mathrm{s}$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ |
|---------------------------+----------------------+----------------+----------------+------------------------+------------------------|
| MCMC (nÂ° 2)               |          4.37106e-07 |    7.95761e-13 |     0.00046037 |             1.4894e-05 |            0.000152093 |
| Min. ($\ell\in[2;3000]$)  |          2.53148e-06 |    7.13821e-12 |     0.00291831 |            0.000104709 |             0.00135525 |
| Min. ($\ell\in[50;2000]$) |          2.03202e-06 |    5.97189e-12 |     0.00261404 |            8.41646e-05 |             0.00127252 |
| Min. ($\ell\in[50;1500]$) |          9.88702e-07 |    2.64955e-12 |     0.00126386 |            4.27381e-05 |            0.000495158 |

***** Plotting everything
#+BEGIN_SRC ipython :session bcv :results raw drawer :var data1=soxso_pxp :var data2=soxp_soxso :var data3=soxp_pxp
  ref_PP = np.array(data1[0][1:], dtype=np.float)
  fig, ax = plt.subplots(1, 3, sharex='col', sharey='row', figsize=(10, 5))
  xlabels = [r"$\theta_\mathrm{MC}$",
            r"$A_\mathrm{s}$",
            r"$n_\mathrm{s}$",
            r"$\Omega_\mathrm{b}h^2$",
            r"$\Omega_\mathrm{c}h^2$"]
  x = np.arange(5)
  for i in range(1, len(data1)):
      values = np.array(data1[i][1:], dtype=np.float)
      ax[0].plot(x, ref_PP/values, "o")
  ax[0].set_ylabel(r"$\Delta\sigma$ (/Planck)")
  ax[0].set_title("SOxSO - PxP")
  ax[0].set_xticks(x)
  ax[0].set_xticklabels(xlabels)

  for i in range(0, len(data2)):
      values = np.array(data2[i][1:], dtype=np.float)
      ax[1].plot(x, ref_PP/values, "o", label=data2[i][0])

  ax[1].set_title("SOxP - SOxSO")
  ax[1].set_xticks(x)
  ax[1].set_xticklabels(xlabels)
  ax[1].legend(loc="upper left", bbox_to_anchor=(1,1))

  for i in range(0, len(data3)):
      values = np.array(data3[i][1:], dtype=np.float)
      ax[2].plot(x, ref_PP/values, "o", label=data2[i][0])

  # ax[2].set_title("SOxP - PxP")
  # ax[2].set_xticks(x)
  # ax[2].set_xticklabels(xlabels)
  # ax[2].legend(loc="upper left", bbox_to_anchor=(1,1))

  plt.subplots_adjust(wspace=0.1)
#+END_SRC

#+RESULTS:
:results:
# Out[1078]:
[[file:./obipy-resources/eOB82R.png]]
:end:
** \Lambda CDM + ALens
#+BEGIN_SRC ipython :session bcv :results none
  labels = [r"$\theta_\mathrm{MC}$",
            r"$\log(10^{10}A_\mathrm{s})$",
            r"$n_\mathrm{s}$",
            r"$\Omega_\mathrm{b}h^2$",
            r"$\Omega_\mathrm{c}h^2$",
            r"$\mathrm{A}_\mathrm{L}$",
            r"$\chi^2-\chi^2_\mathrm{min}$",
            r"$A_\mathrm{s}$"]

  result_path = r"/home/garrido/Workdir/CMB/analysis/beyondCV/output/ALens"
#+END_SRC

*** Check minimization
Get Hessians from minimizations
#+BEGIN_SRC ipython :session bcv :results raw output
  def check_minimization(path):
      all_files = glob.glob(path)
      all_files.sort()
      table = []
      for f in all_files:
          import pickle
          opt_result =  pickle.load(open(f, "rb"))["results"]["OptimizeResult"]
          msg = opt_result.get("message")
          ntry = opt_result.get("ntry")
          proposal = np.sqrt(np.diag(opt_result.get("hess_inv")))
          table += [[f.split("/")[-2], msg, ntry, *proposal]]
      return table

  headers = ["" for i in range(len(table))]
  headers[0:3] = ["Directory", "Status", "ntry"]
  table = check_minimization(result_path + "/results_*/min*.pkl")
  print(tabulate.tabulate(table, headers=headers, tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
| Directory                | Status                                                        | ntry |             |             |             |             |             |            |
|--------------------------+---------------------------------------------------------------+------+-------------+-------------+-------------+-------------+-------------+------------|
| results_PxP_666_0        | Optimization terminated successfully.                         |    1 | 2.45279e-06 |  0.00127271 |  0.00173696 | 1.92859e-05 | 0.000102676 |  0.0371089 |
| results_PxP_666_1        | Optimization terminated successfully.                         |    3 | 2.51867e-06 |  0.00127433 |  0.00174105 | 1.98167e-05 | 0.000104576 |  0.0372196 |
| results_PxP_666_2        | Optimization failed. Estimated distance to minimum too large. |   10 | 7.88674e-06 |   0.0054606 |  0.00336989 | 0.000469289 |  0.00161214 |  0.0321427 |
| results_PxP_666_3        | Optimization terminated successfully.                         |    2 | 1.56056e-06 |  0.00124956 |  0.00186414 | 7.75352e-08 | 1.32847e-06 |   0.037062 |
| results_PxP_666_4        | Optimization failed. Estimated distance to minimum too large. |   10 | 8.69136e-06 |  0.00701867 |  0.00145824 | 0.000264677 |  0.00175731 |  0.0335381 |
| results_SOxP-PxP_666_0   | Optimization failed. Estimated distance to minimum too large. |   10 | 9.22459e-07 |  0.00104732 | 0.000564614 | 5.04288e-05 | 0.000201154 | 0.00714164 |
| results_SOxP-PxP_666_1   | Optimization terminated successfully.                         |   10 |  9.0337e-08 | 2.84498e-05 | 5.98497e-05 |  1.5575e-06 | 0.000191972 | 0.00193414 |
| results_SOxP-PxP_666_2   | Optimization failed. Estimated distance to minimum too large. |   10 | 9.57402e-07 |  0.00105051 | 0.000581368 |  5.4242e-05 | 0.000203156 | 0.00703166 |
| results_SOxP-PxP_666_3   | Optimization terminated successfully.                         |    3 | 1.96339e-09 | 0.000126758 | 0.000263662 | 2.40126e-08 | 4.72171e-07 | 0.00915843 |
| results_SOxP-PxP_666_4   | Optimization terminated successfully.                         |    5 |         nan | 0.000131209 | 0.000245221 | 1.65014e-08 | 8.61895e-08 | 0.00836779 |
| results_SOxP-SOxSO_666_0 | Optimization failed. Estimated distance to minimum too large. |   10 | 2.12856e-05 |    0.043254 |   0.0928904 |   0.0030256 |   0.0276215 |   0.499861 |
| results_SOxP-SOxSO_666_1 | Optimization failed. Estimated distance to minimum too large. |   10 | 9.34821e-07 |  0.00101484 | 0.000580833 | 5.28625e-05 | 0.000201045 | 0.00599991 |
| results_SOxP-SOxSO_666_2 | Optimization failed. Estimated distance to minimum too large. |   10 | 9.20422e-07 |  0.00101758 | 0.000576264 | 5.11041e-05 | 0.000201932 | 0.00604622 |
| results_SOxP-SOxSO_666_3 | Optimization terminated successfully.                         |    9 | 3.68883e-07 | 0.000191872 | 0.000375334 | 1.20329e-05 | 9.44402e-05 | 0.00892633 |
| results_SOxP-SOxSO_666_4 | Optimization failed. Estimated distance to minimum too large. |   10 | 9.46696e-07 |  0.00101196 |  0.00057742 | 5.32062e-05 | 0.000200988 | 0.00596027 |
| results_SOxSO-PxP_666_0  | Optimization terminated successfully.                         |    3 | 3.75123e-08 | 0.000253156 | 0.000544788 | 2.39345e-07 | 2.75641e-06 |  0.0181562 |
| results_SOxSO-PxP_666_1  | Optimization terminated successfully.                         |    1 | 9.69176e-11 | 0.000255144 | 0.000542427 | 2.53447e-09 | 4.46759e-07 |  0.0164859 |
| results_SOxSO-PxP_666_2  | Optimization terminated successfully.                         |    2 | 1.06214e-06 |  0.00136352 |  0.00130783 | 3.26274e-05 | 0.000510877 |  0.0188921 |
| results_SOxSO-PxP_666_3  | Optimization terminated successfully.                         |    4 | 9.82267e-07 | 0.000595596 | 0.000927502 |  3.1446e-05 | 0.000270605 |  0.0188644 |
| results_SOxSO-PxP_666_4  | Optimization terminated successfully.                         |    2 | 3.05605e-10 | 0.000254057 | 0.000538275 | 1.82764e-08 |  1.3862e-06 |  0.0192113 |

*** Check chains
**** PxP
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_chains(result_path + "/*_PxP*/mcmc*.txt", labels=labels)
#+END_SRC

#+RESULTS:
:results:
# Out[1012]:
[[file:./obipy-resources/ZesjxE.png]]
:end:

**** SOxSO - PxP
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_chains(result_path + "/*_SOxSO-PxP*/mcmc*.txt", labels=labels)
#+END_SRC

#+RESULTS:
:results:
# Out[602]:
[[file:./obipy-resources/W1oxpG.png]]
:end:

**** SOxP - PxP
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_chains(result_path + "/*_SOxP-PxP*/mcmc*.txt", burnin=0, labels=labels)
#+END_SRC

#+RESULTS:
:results:
# Out[603]:
[[file:./obipy-resources/xIdBCP.png]]
:end:

**** SOxP - SOxSO
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_chains(result_path + "/*_SOxP-SOxSO*/mcmc*.txt", labels=labels)
#+END_SRC

#+RESULTS:
:results:
# Out[604]:
[[file:./obipy-resources/NWDgan.png]]
:end:
*** Triangle plot
#+BEGIN_SRC ipython :session bcv :results none
  def plot_samples(path, burnin=0.3):
      samples = []
      colors = []
      line_args = []
      all_files = glob.glob(path)
      all_files.sort()
      for f in all_files:
          s, w = get_samples(f)
          survey = f.split("/")[-2]
          i = survey.split("_")[-1]
          survey = survey.split("_")[1]
          samples += [MCSamples(samples=s, names=labels, label="{} - MCMC {}".format(survey, i), weights=w, ignore_rows=burnin)]
          colors += ["-C{}".format(i)]

      g = plots.getSubplotPlotter()
      g.settings.lineM = colors
      g.triangle_plot(samples, params=labels[:-2])#, line_args=len(all_files)*[{"lw": 1}])
#+END_SRC

**** PxP
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_samples(result_path + "/*_PxP*_[0-4]/mcmc*.txt", burnin=0.3)
#+END_SRC

#+RESULTS:
:results:
# Out[1024]:
[[file:./obipy-resources/8XywgR.png]]
:end:
**** SOxSO - PxP
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_samples(result_path + "/*_SOxSO-PxP*_[2,3]/mcmc*.txt", burnin=0.3)
#+END_SRC

#+RESULTS:
:results:
# Out[937]:
[[file:./obipy-resources/qyml5n.png]]
:end:
**** SOxP - PxP
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_samples(result_path + "/*_SOxP-PxP*_[0,2]/mcmc*.txt", burnin=0.3)
#+END_SRC

#+RESULTS:
:results:
# Out[938]:
[[file:./obipy-resources/sdJfUB.png]]
:end:

**** SOxP - SOxSO
#+BEGIN_SRC ipython :session bcv :results raw drawer
  plot_samples(result_path + "/*_SOxP-SOxSO*_[1,2,4]/mcmc*.txt", burnin=0.3)
#+END_SRC

#+RESULTS:
:results:
# Out[939]:
[[file:./obipy-resources/7kMBK0.png]]
:end:
*** Compute standard deviation from MCMC
#+BEGIN_SRC ipython :session bcv :results none
  tablePP = get_mcmc_variances(result_path + "/*_PxP_*/mcmc*.txt", burnin=0.3)
  tableSSPP = get_mcmc_variances(result_path + "/*_SOxSO-PxP_*[2,3]/mcmc*.txt", burnin=0.3)
  tableSPSS = get_mcmc_variances(result_path + "/*_SOxP-SOxSO_*[1,2,4]/mcmc*.txt", burnin=0.3)
#+END_SRC

**** PxP
#+BEGIN_SRC ipython :session bcv :results raw output
  print(tabulate.tabulate(tablePP, headers=labels[:-2], tablefmt="orgtbl"))
#+END_SRC

#+TBLNAME: pp
#+RESULTS:
|                   | $\theta_\mathrm{MC}$ | $\log(10^{10}A_\mathrm{s})$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ | $\mathrm{A}_\mathrm{L}$ |
|-------------------+----------------------+-----------------------------+----------------+------------------------+------------------------+-------------------------|
| results_PxP_666_0 |          2.25445e-06 |                  0.00280028 |     0.00252237 |            9.44371e-05 |              0.0011046 |               0.0330274 |
| results_PxP_666_1 |           2.2771e-06 |                  0.00271089 |     0.00251489 |            9.19644e-05 |             0.00106107 |               0.0314946 |
| results_PxP_666_2 |          2.13857e-06 |                  0.00266458 |     0.00245774 |            8.94339e-05 |             0.00103877 |               0.0306628 |
| results_PxP_666_4 |          2.25782e-06 |                  0.00277658 |     0.00253481 |            9.34218e-05 |             0.00109458 |               0.0315018 |

**** SOxSO-PxP
#+BEGIN_SRC ipython :session bcv :results raw output
  print(tabulate.tabulate(tableSSPP, headers=labels[:-2], tablefmt="orgtbl"))
#+END_SRC

#+TBLNAME: sspp
#+RESULTS:
|                         | $\theta_\mathrm{MC}$ | $\log(10^{10}A_\mathrm{s})$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ | $\mathrm{A}_\mathrm{L}$ |
|-------------------------+----------------------+-----------------------------+----------------+------------------------+------------------------+-------------------------|
| results_SOxSO-PxP_666_2 |          9.05033e-07 |                 0.000803214 |     0.00102366 |             3.4062e-05 |            0.000335125 |               0.0141448 |
| results_SOxSO-PxP_666_3 |          8.97457e-07 |                 0.000829307 |     0.00105136 |             3.3716e-05 |            0.000346686 |               0.0141123 |

**** SOxP-SOxSO
#+BEGIN_SRC ipython :session bcv :results raw output
  print(tabulate.tabulate(tableSPSS, headers=labels[:-2], tablefmt="orgtbl"))
#+END_SRC

#+TBLNAME: spss
#+RESULTS:
|                          | $\theta_\mathrm{MC}$ | $\log(10^{10}A_\mathrm{s})$ | $n_\mathrm{s}$ | $\Omega_\mathrm{b}h^2$ | $\Omega_\mathrm{c}h^2$ | $\mathrm{A}_\mathrm{L}$ |
|--------------------------+----------------------+-----------------------------+----------------+------------------------+------------------------+-------------------------|
| results_SOxP-SOxSO_666_1 |          4.14193e-07 |                 0.000383167 |    0.000473693 |            1.57655e-05 |            0.000158367 |              0.00695751 |
| results_SOxP-SOxSO_666_2 |           4.1753e-07 |                 0.000364523 |    0.000451245 |            1.45673e-05 |            0.000149416 |              0.00647078 |
| results_SOxP-SOxSO_666_4 |          3.86853e-07 |                 0.000339615 |    0.000422059 |             1.4264e-05 |            0.000139798 |              0.00667364 |

**** Plot everything together
First check MCMC /vs./ Hessian
#+BEGIN_SRC ipython :session bcv :results raw drawer
  hessians = check_minimization(result_path + "/*_PxP_*[0,1,2,4]/min*.pkl")
  hessians = np.array(hessians[:, 3:], dtype=np.float)
  mcmc = np.array(tablePP[:, 1:], dtype=np.float)
  for i in range(np.size(tablePP, 0)):
      label = tablePP[i, 0].split("_")[-1]
      plt.plot(hessians[i,]/mcmc[i,], "o", label="simulation {}".format(label), color="C{}".format(label))
  plt.ylabel(r"$\Delta\sigma$ (/MCMC)")
  xlabels = labels[:-2]
  plt.xticks(np.arange(len(xlabels)), xlabels)
  plt.legend(loc="upper left", bbox_to_anchor=(1,1))
#+END_SRC

#+RESULTS:
:results:
# Out[757]:
: <matplotlib.legend.Legend at 0x7fcbe798ff28>
[[file:./obipy-resources/UXgu1u.png]]
:end:

#+BEGIN_SRC ipython :session bcv :results raw drawer :var pp=pp :var sspp=sspp :var spss=spss
  data = {"PP": pp, "SOxSO - PxP": sspp, "SOxP - SOxSO": spss}
  sigmas = {}
  for k, v in data.items():
      v = list(zip(*v))
      v = np.array(v[1:], dtype=np.float)
      sigmas[k] = np.mean(v, axis=1)
  xlabels = labels[:-2]
  x = np.arange(len(xlabels))
  for k, v in sigmas.items():
      if k == "PP":
        continue
      plt.plot(x, sigmas["PP"]/v-1, "o", label=k)
  plt.ylabel(r"$\Delta\sigma$ (/Planck)")
  plt.xticks(x, labels[:-2])
  plt.legend(loc="upper left", bbox_to_anchor=(1,1))
#+END_SRC

#+RESULTS:
:results:
# Out[756]:
: <matplotlib.legend.Legend at 0x7fcbe7ecafd0>
[[file:./obipy-resources/3dtefc.png]]
:end:
